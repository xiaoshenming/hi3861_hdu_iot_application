# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/appexecfwk/standard/appexecfwk.gni")

module_output_path = "bundle_tool/tools"

config("tools_bm_config_moduletest") {
  include_dirs = [
    "${appexecfwk_path}/services/bundlemgr/include/installd",
    "${appexecfwk_path}/services/bundlemgr/include",
    "${appexecfwk_path}/services/bundlemgr/include/sandbox_app",
    "//foundation/distributedschedule/safwk/services/safwk/include",
    "//third_party/json/include",
    "//third_party/zlib",
    "//third_party/zlib/contrib/minizip",
  ]
}

tools_bm_mock_sources = [
  "${appexecfwk_path}/tools/test/mock/mock_bundle_installer_host.cpp",
  "${appexecfwk_path}/tools/test/mock/mock_bundle_mgr_host.cpp",
]

ohos_moduletest("bm_command_dump_module_test") {
  module_out_path = module_output_path

  sources = [
    "${appexecfwk_path}/kits/appkit/napi/bundlemgr/bundle_death_recipient.cpp",
    "${appexecfwk_path}/tools/bm/src/bundle_command.cpp",
    "${appexecfwk_path}/tools/bm/src/shell_command.cpp",
    "${appexecfwk_path}/tools/bm/src/status_receiver_impl.cpp",
    "bm_command_dump_module_test.cpp",
  ]
  sources += tools_bm_mock_sources

  configs = [
    "${appexecfwk_path}/tools/bm:tools_bm_config",
    "${appexecfwk_path}/tools/test/unittest/bm:tools_bm_config_mock",
  ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${appexecfwk_path}/common:libappexecfwk_common",
    "${appexecfwk_path}/services/bundlemgr:libbms",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:base",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "ces_standard:cesfwk_innerkits",
    "distributeddatamgr:distributeddata_inner",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "os_account_standard:os_account_innerkits",
    "samgr_standard:samgr_proxy",
    "startup_l2:syspara",
    "utils_base:utils",
  ]
  defines = []
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resmgr_standard:global_resmgr" ]
  }
}

ohos_moduletest("bm_command_install_module_test") {
  module_out_path = module_output_path

  sources = [
    "${appexecfwk_path}/kits/appkit/napi/bundlemgr/bundle_death_recipient.cpp",
    "${appexecfwk_path}/tools/bm/src/bundle_command.cpp",
    "${appexecfwk_path}/tools/bm/src/shell_command.cpp",
    "${appexecfwk_path}/tools/bm/src/status_receiver_impl.cpp",
    "bm_command_install_module_test.cpp",
  ]
  sources += tools_bm_mock_sources

  configs = [
    "${appexecfwk_path}/tools/bm:tools_bm_config",
    "${appexecfwk_path}/tools/test/unittest/bm:tools_bm_config_mock",
  ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${appexecfwk_path}/common:libappexecfwk_common",
    "${appexecfwk_path}/services/bundlemgr:libbms",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:base",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "ces_standard:cesfwk_innerkits",
    "distributeddatamgr:distributeddata_inner",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "os_account_standard:os_account_innerkits",
    "samgr_standard:samgr_proxy",
    "startup_l2:syspara",
    "utils_base:utils",
  ]
  defines = []
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resmgr_standard:global_resmgr" ]
  }
}

ohos_moduletest("bm_command_uninstall_module_test") {
  module_out_path = module_output_path

  sources = [
    "${appexecfwk_path}/kits/appkit/napi/bundlemgr/bundle_death_recipient.cpp",
    "${appexecfwk_path}/tools/bm/src/bundle_command.cpp",
    "${appexecfwk_path}/tools/bm/src/shell_command.cpp",
    "${appexecfwk_path}/tools/bm/src/status_receiver_impl.cpp",
    "bm_command_uninstall_module_test.cpp",
  ]
  sources += tools_bm_mock_sources

  configs = [
    "${appexecfwk_path}/tools/bm:tools_bm_config",
    "${appexecfwk_path}/tools/test/unittest/bm:tools_bm_config_mock",
  ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${appexecfwk_path}/common:libappexecfwk_common",
    "${appexecfwk_path}/services/bundlemgr:libbms",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:base",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "ces_standard:cesfwk_innerkits",
    "distributeddatamgr:distributeddata_inner",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "os_account_standard:os_account_innerkits",
    "samgr_standard:samgr_proxy",
    "startup_l2:syspara",
    "utils_base:utils",
  ]
  defines = []
  if (global_resmgr_enable) {
    defines += [ "GLOBAL_RESMGR_ENABLE" ]
    external_deps += [ "resmgr_standard:global_resmgr" ]
  }
}

group("moduletest") {
  testonly = true

  deps = [
    ":bm_command_dump_module_test",
    ":bm_command_install_module_test",
    ":bm_command_uninstall_module_test",
  ]
}
