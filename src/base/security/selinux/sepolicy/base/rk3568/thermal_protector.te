# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the License);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

allow thermal_protector data_file:dir { search };
allow thermal_protector data_service_el2_file:dir { read open search };
allow thermal_protector data_service_file:dir { search };
allow thermal_protector debugfs:dir { search };
allow thermal_protector dev_at_file:chr_file { ioctl open read write };
allow thermal_protector dev_binder_file:chr_file { ioctl map open read write };
allow thermal_protector dev_file:dir { search };
allow thermal_protector dev_null_file:chr_file { read write };
allow thermal_protector dev_parameters_file:dir { search };
allow thermal_protector dev_parameters_file:file { map open read };
allow thermal_protector dev_random_file:chr_file { open read };
allow thermal_protector dev_unix_file:dir { search };
allow thermal_protector dev_unix_socket_file:dir { search };
allow thermal_protector dev_unix_socket_file:sock_file { write };
allow thermal_protector etc_file:lnk_file { read };
allow thermal_protector init:fd { use };
allow thermal_protector init:netlink_kobject_uevent_socket { read write };
allow thermal_protector init:unix_dgram_socket { sendto };
allow thermal_protector init:unix_stream_socket { read write };
allow thermal_protector kernel:fd { use };
allow thermal_protector rootfs:dir { search };
allow thermal_protector samgr:binder { call transfer };
allow thermal_protector thermal_protector:capability { chown dac_override net_admin sys_admin };
allow thermal_protector thermal_protector_exec:file { entrypoint execute map read };
allow thermal_protector thermal_protector:netlink_kobject_uevent_socket { bind create read setopt };
allow thermal_protector thermal_protector:process { fork };
allow thermal_protector thermal_protector:unix_dgram_socket { connect create write };
allow thermal_protector sys_file:dir { open read search };
allow thermal_protector sys_file:file { open write };
allow thermal_protector sys_file:lnk_file { read };
allow thermal_protector sysfs_block_file:dir { open read search };
allow thermal_protector system_etc_file:dir { getattr open read search };
allow thermal_protector system_etc_file:file { getattr open read };
allow thermal_protector system_file:dir { search };
allow thermal_protector system_lib_file:dir { search };
allow thermal_protector system_lib_file:file { execute getattr map open read };
allow thermal_protector system_profile_file:dir { search };
allow thermal_protector system_profile_file:file { getattr open read };
allow thermal_protector system_usr_file:dir { search };
allow thermal_protector system_usr_file:file { getattr map open read };
allow thermal_protector vendor_file:dir { search };
allow thermal_protector vendor_file:file { execute getattr map open read };
allow thermal_protector vendor_file:lnk_file { read };
allow thermal_protector tmpfs:dir { add_name create mounton search setattr write };
allowxperm thermal_protector dev_at_file:chr_file ioctl { 0x4101 };
allowxperm thermal_protector dev_binder_file:chr_file ioctl { 0x6201 0x6205 0x6209 0x621e 0x621f };